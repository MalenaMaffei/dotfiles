#!/usr/bin/env bash

scriptDir=$(dirname `realpath -P "$0"`)
scriptName=$(basename $0)

# KEY_PRESS .......... 2
# KEY_RELEASE ........ 3
# BUTTON_PRESS ....... 4
# BUTTON_RELEASE ..... 5
# MOTION_NOTIFY ...... 6
# ENTER_NOTIFY ....... 7
# LEAVE_NOTIFY ....... 8
# FOCUS_IN ........... 9
# FOCUS_OUT .......... 10
# KEYMAP_NOTIFY ...... 11
# EXPOSE ............. 12
# GRAPHICS_EXPOSURE .. 13
# NO_EXPOSURE ........ 14
# VISIBILITY_NOTIFY .. 15
# CREATE_NOTIFY ...... 16
# DESTROY_NOTIFY ..... 17
# UNMAP_NOTIFY ....... 18
# MAP_NOTIFY ......... 19
# MAP_REQUEST ........ 20
# REPARENT_NOTIFY .... 21
# CONFIGURE_NOTIFY ... 22
# CONFIGURE_REQUEST .. 23
# GRAVITY_NOTIFY ..... 24
# RESIZE_REQUEST ..... 25
# CIRCULATE_NOTIFY ... 26
# CIRCULATE_REQUEST .. 27
# PROPERTY_NOTIFY .... 28
# SELECTION_CLEAR .... 29
# SELECTION_REQUEST .. 30
# SELECTION_NOTIFY ... 31
# COLORMAP_NOTIFY .... 32
# CLIENT_MESSAGE ..... 33
# MAPPING_NOTIFY ..... 34
# GE_GENERIC ......... 35

function handleRules(){
  local winID="${1}"
  local eventName="${2}"
  local winName=$(xprop -id "${winID}" WM_NAME | grep -v 'not found' | cut -d '"' -f 2)
  local winClass=$(xprop -id "${winID}" WM_CLASS | grep -v 'not found' | cut -d '"' -f 2)

  # Skip windows without class and name
  [[ -z "${winName}" && -z "${winClass}" ]] && continue

  local nameRule="$(dirname ${scriptDir})/rules/name.${winName}"
  local classRule="$(dirname ${scriptDir})/rules/class.${winClass}"

  if [[ -f "${nameRule}" ]]; then
    "${nameRule}" "${winID}" "${eventName}"
  elif [[ -f "${classRule}" ]]; then
    "${classRule}" "${winID}" "${eventName}"
  fi
}

function onCreate(){
  local winID="${1}"
  local eventName='onCreate'

  handleRules "${winID}" "${eventName}"

  # If rule exits high rc != 0, skip focus
  [[ $? -gt 0 ]] && return 1

  [[ $(wattr "${winID}") ]] && return 1

  "${scriptDir}/stwf" "${winID}"
}

function onDestroy(){
  local winID="${1}"
  local eventName='onDestroy'
  local tagIDs=$(cd /tmp/.wm/tags && ls */${winID} 2>/dev/null | xargs dirname | sort -u)

  handleRules "${winID}" "${eventName}"

  # Skip tag deletion if no tag was found
  [[ $? -gt 0 ]] && continue

  # Continue with tag deletion
  for tagID in "${tagIDs}"; do
    "${scriptDir}/tagw" -t "${tagID}" -a del -w "${winID}"
  done
}

function onMap(){
  local winID="${1}"
  local eventName='onMap'

  handleRules "${winID}" "${eventName}"

  "${scriptDir}/efwf"
}

function onUnmap(){
  local winID="${1}"
  local eventName='onUnmap'

  handleRules "${winID}" "${eventName}"

  "${scriptDir}/efwf"
}

function onVisible(){
  local winID="${1}"
  local eventName='onVisible'

  handleRules "${winID}" "${eventName}"

  "${scriptDir}/efwf"
}

# React on X events (roxe)
function main(){
  wew | while IFS=':' read eventID winID; do
    case ${eventID} in
      #15) onVisible "${winID}";;
      16) onCreate "${winID}";;
      17) onDestroy "${winID}";;
      18) onUnmap "${winID}";;
      19) onMap "${winID}";;
    esac
  done
}

main ${@}