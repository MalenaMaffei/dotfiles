#!/usr/bin/env bash

scriptDir=$(dirname `realpath -P "$0"`)
scriptName=$(basename $0)
source "${scriptDir}/config"

function usage(){
  cat <<EOF
  ${scriptName} <WID>

  Set window focus
EOF
  exit 1
}

function main(){
  local winID="${1}"

  [[ "$#" -eq 0 ]] && >&2 usage

  wattr "${winID}"
  if [[ $? -eq 1 ]]; then
    1>&2 echo "Error: Window \"${winID}\" does not exist."
    return 1
  fi

  local winW=$(wattr w "${winID}")
  local winH=$(wattr h "${winID}")

  local rootID=$(lsw -r)
  local rootW=$(wattr w "${rootID}")
  local rootH=$(wattr h "${rootID}")

  chwso -r "${winID}" # Put window on top
  wtf "${winID}" # Set keyboard focus
  #wmp -a $(wattr xy "${winID}") # move the mouse cursor to
  #wmp -r "$((winW /2))" "$((winH /2))" # .. its center
  #modw a "${winID}" # Maximize window

  eval "$(xres2var)"
  local focCol="0xFF$(echo "${!ACTIVE_BORDER}" | tr -d '#')"
  local othCol="0xFF$(echo "${!NORMAL_BORDER}" | tr -d '#')"
  chwb -c "${othCol}" -s "${WIN_BORDER}" $(lsw | grep -v "${winID}")

  # If window is not fullscreen, give it a border
  if [[ "${winW}" -lt "${rootW}" ]] || [[ "${winH}" -lt "${rootH}" ]]; then
    chwb -c "${focCol}" -s "${WIN_BORDER}" "${winID}"
  # Window is fullscreen, remove border
  else
    chwb -c "${focCol}" -s 0 "${winID}"
  fi
}

main "${@}"